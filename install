#!/bin/bash
#
# Dotfiles installation script
# Author: Matt Adams
#
# vim: ft=sh

args=("$@")
usage="Usage: $(basename $0)
  -X                Install X related files
  --uninstall       Uninstall files from this repo
"
for ((arg=0; arg<"${#args[@]}"; arg++))
do
	[ "${args[$arg]}" == "--help" ] && echo -e "$usage" && exit
	[ "${args[$arg]}" == "--uninstall" ] && uninstall=true
	[ "${args[$arg]}" == "--update-submodules" ] && update_submodules=true
	[ "${args[$arg]}" == "-X" ] && install_x=true
done
[ -z "$install_x" ] && skip_files="Xresources Xresources-themes Xresources.d"

# Update this repo and it's submodules
update_repo()
{
	git pull origin master
	git submodule update --init --recursive
}

update_submodules()
{
	[ -z "$update_submodules" ] && return
	git submodule update --recursive --remote
}

# Remove files & dirs that are no longer being managed
cleanup()
{
	test -L ~/.bash.d && rm ~/.bash.d
	test -L ~/.npmrc && rm ~/.npmrc
	test -L ~/.curlrc && rm ~/.curlrc
	test -L ~/.cvsrc && rm ~/.cvsrc
	test -L ~/.wgetrc && rm ~/.wgetrc
	test -L ~/.uninstall && rm ~/.uninstall
	test -L ~/.Xdefaults && rm ~/.Xdefaults
	test -d ~/.vim/bundle/badwolf && rm -rf ~/.vim/bundle/badwolf
	test -d ~/.vim/bundle/molokai && rm -rf ~/.vim/bundle/molokai
	test -d ~/.vim/bundle/nerdtree && rm -rf ~/.vim/bundle/nerdtree
	test -d ~/.vim/bundle/onedark && rm -rf ~/.vim/bundle/onedark
	test -d ~/.vim/bundle/phpcomplete.vim && rm -rf ~/.vim/bundle/phpcomplete.vim
	test -d ~/.vim/bundle/space-vim-dark && rm -rf ~/.vim/bundle/space-vim-dark
	test -d ~/.vim/bundle/supertab && rm -rf ~/.vim/bundle/supertab
	test -d ~/.vim/bundle/tagbar && rm -rf ~/.vim/bundle/tagbar
	test -d ~/.vim/bundle/todo.txt-vim && rm -rf ~/.vim/bundle/todo.txt-vim
	test -d ~/.vim/bundle/vim-afterglow && rm -rf ~/.vim/bundle/vim-afterglow
	test -d ~/.vim/bundle/vim-colors-solarized && rm -rf ~/.vim/bundle/vim-colors-solarized
	test -d ~/.vim/bundle/vim-jade && rm -rf ~/.vim/bundle/vim-jade
	test -d ~/.vim/bundle/vim-less && rm -rf ~/.vim/bundle/vim-less
	test -d ~/.vim/bundle/vim-maui && rm -rf ~/.vim/bundle/vim-maui
	test -d ~/.vim/bundle/vmustache && rm -rf ~/.vim/bundle/vmustache
}

# TODO needs work
# loop instead of listing all files
# restore backups. which would also require creating backups... :)
uninstall()
{
	rm ${HOME}/.Xresources \
			${HOME}/.Xresources-themes \
			${HOME}/.Xresources.d \
			${HOME}/.bash.d \
			${HOME}/.bash_profile \
			${HOME}/.bashrc \
			${HOME}/.bash_logout \
			${HOME}/.gitconfig \
			${HOME}/.gitconfig.user \
			${HOME}/.npmrc \
			${HOME}/.psqlrc \
			${HOME}/.screenrc \
			${HOME}/.tmux.conf \
			${HOME}/.vim \
			${HOME}/.vimrc
}

# Install coc dependencies if node/npm is installed
# TODO handle yarn & pnpm
update_coc()
{
	if [ -x $(which npm > /dev/null 2>&1) ]
	then
		echo "Updating coc.nvim plugin..."
		cd vim/bundle/coc.nvim
		npm install
		git reset --hard
		cd -
	fi
}

pre_install_actions()
{
	cleanup
	update_repo
	update_submodules
	update_coc
}

post_install_actions()
{
	source ~/.bash_profile
}

install_home()
{
	local dest_dir="$HOME"
	local excluded="$(basename $0) README.md $skip_files"
	local replace_all=false

	pre_install_actions

	local file
	for file in *
	do
		if ! element_exists "$file" "$excluded"
		then
			local dest_file_name=$(basename "$file" .tpl)
			local dest_file_path="$dest_dir/.$dest_file_name"
			install_file "$file" "$dest_file_path"
		fi
	done

	post_install_actions
}

install_file()
{
	local file="$1"
	local dest_file_path="$2"
	if [[ -e $dest_file_path ]] || \
		[[ -L $dest_file_path ]] # Can be a broken symlink
	then
		if [[ -e $dest_file_path ]] &&
			diff -q "$file" "$dest_file_path" > /dev/null
		then
			echo "dotfiles: identical $dest_file_path"
		elif $replace_all
		then
			replace_file "$file" "$dest_file_path"
		else
			read -p "dotfiles: overwrite ${dest_file_path}? [ynaq] "
			case $REPLY in
				'y') replace_file "$file" "$dest_file_path" ;;
				'q') exit 1 ;;
				'a') replace_all=true
						 replace_file "$file" "$dest_file_path" ;;
				*) echo "dotfiles: skipping $dest_file_path" ;;
			esac
		fi
	else
		link_file "$file" "$dest_file_path"
	fi
}

replace_file()
{
	local file="$1"
	local dest_file_path="$2"
	remove "$dest_file_path"
	link_file "$file" "$dest_file_path"
}

link_file()
{
	local file="$1"
	local dest_file_path="$2"
	if [[ $file =~ \.tpl$ ]]
	then
		echo "dotfiles: generating $dest_file_path"
		bash "$file" > "$dest_file_path"
	else
		echo "dotfiles: linking $dest_file_path"
		ln -s "$(pwd)/$file" "$dest_file_path"
	fi
}

element_exists()
{
	local elem="$1"
	shift
	local arr=($@)
	local i

	for i in ${arr[@]}
	do
		if [[ $i == $elem ]]
		then
			return 0
		fi
	done

	return 1
}

remove()
{
	local file="$1"

	# Don't recursively remove symbolic links to directories,
	# just real directories.
	if [[ -d $file ]] && [[ ! -h $file ]]
	then
		rm -rf "$file"
	else
		rm -f "$file"
	fi
}


if [ -n "$uninstall" ]
then
	cleanup
	uninstall
	exit
fi

install_home
