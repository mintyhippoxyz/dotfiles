# vim: ft=sh
#
# Bash prompt that displays git status when in a git repo
# Also shows an indicator when the previous command had a non-zero exit
#
# To enable:
#   echo "export DOTFILES_ENABLE_GIT_PROMPT=true" >> ~/.bashrc_local_before"
#
# TODO PS1 is a little buggy on Alpine.
#      Lines with wrapping text aren't displayed correctly.
#      I have not seen that issue on Gentoo, Ubuntu, or Fedora...
#

test -z "$DOTFILES_ENABLE_GIT_PROMPT" && return

RESET="\[\033[00;00m\]"
RED="\[\033[00;31m\]"
GREEN="\[\033[00;32m\]"
YELLOW="\[\033[00;33m\]"
BLUE="\[\033[00;34m\]"
PURPLE="\[\033[00;35m\]"
CYAN="\[\033[00;36m\]"
LIGHTGRAY="\[\033[00;37m\]"
LRED="\[\033[01;31m\]"
LGREEN="\[\033[01;32m\]"
LYELLOW="\[\033[01;33m\]"
LBLUE="\[\033[01;34m\]"
LPURPLE="\[\033[01;35m\]"
LCYAN="\[\033[01;36m\]"
WHITE="\[\033[01;37m\]"

function is_git_repo()
{
	$(git rev-parse --is-inside-work-tree &> /dev/null)
}

function is_git_dir()
{
	$(git rev-parse --is-inside-git-dir 2> /dev/null)
}

function get_git_branch()
{
	local branch_name
	# Get the short symbolic ref
	branch_name=$(git symbolic-ref --quiet --short HEAD 2> /dev/null) ||
		# If HEAD isn't a symbolic ref, get the short SHA
		branch_name=$(git rev-parse --short HEAD 2> /dev/null) ||
		# Otherwise, just give up
		branch_name="(unknown)"
	printf $branch_name
}

function nonzeroexit()
{
	if [ $? != 0 ]
	then
		printf "${RED}[!]${RESET}" | sed 's%\\\[%%g; s%\\\]%%g'
	fi
}

function prompt_git()
{
	local git_info git_state uc us ut st
	if ! is_git_repo || is_git_dir
	then
		return 1
	fi
	git_info=$(get_git_branch)
	# Check for uncommitted changes in the index
	if ! $(git diff --quiet --ignore-submodules --cached)
	then
		uc="${GREEN}+"
	fi
	# Check for unstaged changes
	if ! $(git diff-files --quiet --ignore-submodules --)
	then
		us="${RED}!"
	fi
	# Check for untracked files
	if [ -n "$(git ls-files --others --exclude-standard)" ]
	then
		ut="${LYELLOW}?"
	fi
	# Check for stashed files
	if $(git rev-parse --verify refs/stash &>/dev/null)
	then
		st="${YELLOW}$"
	fi
	git_state=$uc$us$ut$st
	# Combine the branch name and state information
	if [[ $git_state ]]
	then
		git_info="$git_info${CYAN}($git_state${CYAN})"
	fi
	printf "${WHITE}on ${CYAN}${git_info}" | sed 's%\\\[%%g; s%\\\]%%g'
}

# Set the terminal title to the current working directory
case ${TERM} in
	[aEkx]term*|rxvt*|gnome*|konsole*|interix)
		PS1='\[\033]0;\u@\h:\w\007\]'
		;;
	screen*)
		PS1='\[\033k\u@\h:\w\033\\\]'
		;;
	*)
		unset PS1
		;;
esac

force_color_prompt=yes
if [ -n "$force_color_prompt" ]
then
	if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null
	then
		# We have color support; assume it's compliant with Ecma-48
		# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
		# a case would tend to support setf rather than setaf.)
		color_prompt=yes
	else
		color_prompt=
	fi
fi

if [ "$color_prompt" = yes ]
then
	PS1+="${BLUE}\[┌──\]${RESET}\[\$(nonzeroexit)\]"
	if [[ ${EUID} == 0 ]]
	then
		PS1+="${BLUE}[${RED}\u${LIGHTGRAY}@${RED}\h${BLUE}]${LBLUE} \w "
	else
		PS1+="${BLUE}[${GREEN}\u${LIGHTGRAY}@${GREEN}\h${BLUE}]${LBLUE} \w "
	fi
	PS1+="\$(prompt_git)\n${BLUE}\[└─\]\$ ${RESET}"
else
	PS1='\u@\h:\w\$ '
fi
